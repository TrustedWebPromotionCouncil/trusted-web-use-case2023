buildscript { //properties that you need to build the project

    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        //springboot
        spring_boot_version = '2.1.1.RELEASE'
        spring_boot_gradle_plugin_version = '2.1.1.RELEASE'
        //HTTP Client
        okhttp_version = '3.5.0'

        // Accounts library.
        accounts_release_group = 'com.r3.corda.lib.accounts'
        accounts_release_version = '1.0'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"

        // For Nodes Deployment
        hostNotary=System.getenv('HostNotary') ?: "localhost"
        hostNode01=System.getenv('HostNode01') ?: "localhost"
        hostNode02=System.getenv('HostNode02') ?: "localhost"
        hostNode03=System.getenv('HostNode03') ?: "localhost"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://download.corda.net/maven/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects { //Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url 'https://download.corda.net/maven/corda-dependencies' }
        maven { url 'https://jitpack.io' }
        
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencis
dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    compile("com.google.code.gson:gson:2.8.9")
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

//Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */

    nodeDefaults {
        projectCordapp {
            deploy = false
        }

        cordapp project(':contracts')
        cordapp project(':workflows')

        runSchemaMigration = true //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
    }
    node {
        name "O=SbiR3Japan,OU=Notary,L=Tokyo,C=JP"
        notary = [validating : false]
        p2pAddress "localhost:61101"
        rpcSettings {
            address("0.0.0.0:61102")
            adminAddress("0.0.0.0:61103")
        }
    }

    node {
        name "O=VCAuthOrg,OU=AuthDept,L=Tokyo,C=JP"
        p2pAddress "localhost:10006"
        rpcSettings {
            address("0.0.0.0:10007")
            adminAddress("0.0.0.0:10008")
        }
        rpcUsers = [[ user: "testuser", "password": "password", "permissions": ["ALL"]]]
    }

    node {
        name "O=VCAuthOrgConsortium000001,OU=AuthDept,L=Tokyo,C=JP"
        p2pAddress "localhost:10011"
        rpcSettings {
            address("0.0.0.0:10012")
            adminAddress("0.0.0.0:10013")
        }
        rpcUsers = [[ user: "testuser", "password": "password", "permissions": ["ALL"]]]

    }

    node {
        name "O=VCAuthOrgConsortium000002,OU=AuthDept,L=Tokyo,C=JP"
        p2pAddress "localhost:10016"
        rpcSettings {
            address("0.0.0.0:10017")
            adminAddress("0.0.0.0:10018")
        }
        rpcUsers = [[ user: "testuser", "password": "password", "permissions": ["ALL"]]]

    }


    node {
        name "O=VCAuthCom1,OU=AuthDept,L=Tokyo,C=JP"
        p2pAddress "localhost:10021"
        rpcSettings {
            address("0.0.0.0:10022")
            adminAddress("0.0.0.0:10023")
        }
        rpcUsers = [[ user: "testuser", "password": "password", "permissions": ["ALL"]]]
    }

    node {
        name "O=VCAuthCom2,OU=AuthDept,L=Tokyo,C=JP"
        p2pAddress "localhost:10026"
        rpcSettings {
            address("0.0.0.0:10027")
            adminAddress("0.0.0.0:10028")
        }
        rpcUsers = [[ user: "testuser", "password": "password", "permissions": ["ALL"]]]

    }
}
